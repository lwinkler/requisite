!Design
id: id-design
name: Confstruct library
text: Confstruct C++ library for serialization of classes
children:
  - !Definition
    id: cs::structure
    name: cs::structure
    text: a class that is aware of its members and can be used to store a set of attributes.

  - !Definition
    id: cs::attribute
    name: cs::attribute
    text: "this structure is composed of attributes. Each attribute has: a name, a description, a validity and a target variable of any **compatible variable type**"

  - !Definition
    id: file-types
    name: compatible file type
    children:

    - !Definition &json_format
      id: json-format
      name: JSON format
      text: JSON format

    - !Definition &xml_format
      id: xml-format
      name: XML format
      text: XML format

    - !Definition &yaml_format
      id: yaml-format
      name: YAML format
      text: XML format

  - !Definition
    id: variable-types
    name: compatible variable type
    children:

    - !Definition &variable_type1
      id: variable-type1
      text: "read from a subset of a **compatible text file type**"

    - !Definition &variable_type2
      id: variable-type2
      text: validated against a range

#- general
  - !Requirement
    id: reqQQQ
    text: "A cs::structure can be read from an input file of any **compatible text file type**"
    multiply: file-types
  - !Requirement
    id: reqQQQ
    text: "A cs::structure can be written to an output file of any **compatible text file type**"
  - !Requirement
    id: reqQQQ
    text: A cs::structure can be reset to its default value

  - !Requirement
    id: reqQQQ
    text: A cs::structure can be validated ; the validity criterion is given for each cs::attribute
  - !Requirement
    id: reqQQQ
    text: A cs::structure can be documented

#- inheritance
  - !Requirement
    id: reqQQQ
    text: a child cs::structure shall inherit the list of cs::attribute of the parent cs::structure
  - !Requirement
    id: reqQQQ
    text: a cs::structure can contain a child cs::attribute inside a parent cs::attribute type (abstract or concrete)

#- compatible type
  - !Requirement
    id: reqQQQ
    text: all fundamental type is a **compatible type**
  - !Requirement
    id: reqQQQ
    text: std::string is a **compatible type**
  - !Requirement
    id: reqQQQ
    text: a class enum is a **compatible type**
  - !Requirement
    id: reqQQQ
    text: a std::list of any **compatible type** is a **compatible type**
  - !Requirement
    id: reqQQQ
    text: a std::map of any **compatible type** is a **compatible type**
  - !Requirement
    id: reqQQQ
    text: a class or structure containing classes of any **compatible type** is a **compatible type** (they must be objects and not references/pointers)
  - !Requirement
    id: reqQQQ
    text: a custom class designed by the user can become a **compatible type**

