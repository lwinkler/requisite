!Design
id: design-requisite
children:

# Definitions
- !Definition
  id: design-document
  text: The document that specifies the design.

- !Definition
  id: expanded-design
  text: The full design, after entries have been expanded.

- !Definition
  id: formats
  text: All file formats for input and output.
  children:

  - !Definition
    id: yaml-format
    text: The YAML format, used for input and output.

  - !Definition
    id: html-format
    text: The HTML format to generate documents, reports, ...

- !Definition
  id: syntax-rule
  text: A syntax rule for the <design> read from the <design-document>.

- !Definition
  id: entry-types
  text: "A product design is composed of entries: specifications, requirements, definitions, tests, ..."
  children:
  - !Definition
    id: entry
    text: The parent type for any entry.

  - !Definition
    id: design
    text: The specific design of a product, it contains the definitions, specifications, requirements, ...

  - !Definition
    id: section
    text: A section of the design. This is used purely to structure the <design-document>

  - !Definition
    id: expander
    text: A placeholder <entry> that modifies its parent <entry>
      # - !Definition
      # id: external-section
      # text: A section defined in an outside <design-document>

  - !Definition
    id: definition

  - !Definition
    id: statement
    text: A statement can be any assertion made in the <design-document>. It can be a specification or a requirement

  - !Definition
    id: requirement
    text: A statement that represents a requirement

  - !Definition
    id: specification
    text: A statement that represents a specification

  - !Definition
    id: test
    text: Information about a test. A test can verify a <statement>

  - !Definition
    id: test-list
    text: A list of tests

- !Definition
  id: supported-code-annotations
  text: The different source code annotations formats supported by our parser (to extract information about tests)
  children:
  - !Definition
    id: doxygen-doc-format
  - !Definition
    id: pydoc-doc-format


# Requirements
- !Requirement
  id: req-design-review
  text: A <design-document> describe the software in a readable, flexible, and structured manner.
  children:

  - !Specification
    id: spec-entry-types
    text: A <design-document> is composed of <entry-types>

  - !Specification
    id: spec-syntax-check
    text: The <design-document> is checked against a set of <syntax-rule>s
    children:
      - !Include
        path: specs/rules.yaml


  - !Specification
    id: spec-design-split
    text: A <design> can be split into several files

  - !Specification
    id: spec-input-entries
    text: Any <entry-types> can be read from the <yaml-format>

- !Requirement
  id: req-design-output
  text: After processing the <expanded-design> is written to output for future use
  children:

  - !Specification
    id: spec-design-output-yaml
    text: The <expanded-design> can be written to <yaml-format>

  - !Specification
    id: spec-design-output-html
    text: The <expanded-design> can be written as a report to the <html-format>

  - !Specification
    id: spec-output-tests
    text: All tests required by a design can be written to output

- !Requirement
  id: req-extract-tests
  text: Links between tests and statements can be extracted from the sources of the tests (if properly annotated)
  children:

  - !Specification
    id: spec-extract-tests
    text: Links between tests and statements can be extracted from the sources of the tests in different <supported-code-annotations>
    children: 
    # - !MultiplyByDefinition
    # definition_id: supported-code-annotations

- !Requirement
  id: req-syntax-check
  text: The syntax of the <design-document> is checked


# Test lists
- !TestList
  id: tests-system
  children:

  - !Test
    id: test-design-review # TODO delete
    # labels: non-functional
    text: Verify that a design can be reviewed manually
    statement: req-design-review
