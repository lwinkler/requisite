!Design
id: design-requisite
name: The design entry of requisite
children:

# Definitions
- !Definition
  id: design-document
  text: The document that specifies the design

- !Definition
  id: expanded-design
  text: The full design, after entries have been expanded

- !Definition
  id: formats
  text: All file formats for input and output
  children:

  - !Definition
    id: yaml-format
    text: The YAML format, used for input and output.

  - !Definition
    id: markdown-format
    text: The Markdown format to generate documents, reports, ...

- !Definition
  id: entry-types
  name: Type of entries
  text: "A product design is composed of entries: specifications, requirements, definitions, tests, ..."
  children:
  - !Definition
    id: entry
    text: The parent type for any entry

  - !Definition
    id: design
    text: The specific design of a product, it contains the definitions, specifications, requirements, ...

  - !Definition
    id: section
    name: Section
    text: A section of the design. This is used purely to structure the design document

  - !Definition
    id: external-section
    name: ExternalSection

  - !Definition
    id: definition
    name: Definition

  - !Definition
    id: statement
    name: Statement
    text: A statement can be any assertion made in the *design-document. It can be a specification or a requirement

  - !Definition
    id: requirement
    name: Requirement
    text: A statement that represents a requirement

  - !Definition
    id: specification
    name: Specification
    text: A statement that represents a specification

  - !Definition
    id: test
    name: Test
    text: Information about a test. A test can verify a *statement

  - !Definition
    id: test-list
    name: TestList
    text: A list of tests

- !Definition
  id: test-annotations
  name: Supported source code annotations
  test: The different source code annotations formats supported by our parser (to extract information about tests)
  children:
  - !Definition
    id: doxygen
    name: Doxygen documentation format
  - !Definition
    id: pydoc
    name: Pydoc documentation format

# Requirements
- !Requirement
  id: req-design-review
  text: A *design-document consists of one or several text files
  children:

  - !Specification
    id: spec-input-design
    text: A *design can be read from the *yaml-format

  - !Specification
    id: spec-design-split
    text: A *design can be split into several files

  - !Specification
    id: spec-input-entries
    text: Any *entry-type can be read from the *yaml-format

- !Requirement
  id: req-design-output
  text: After processing the *expanded-design is written to output for future use
  children:

  - !Specification
    id: spec-design-output-yaml
    text: The *expanded-design can be written to *yaml-format

  - !Specification
    id: spec-design-output-markdown
    text: The *expanded-design can be written as a report to the *markdown-format

  - !Specification
    id: spec-output-tests
    text: All tests required by a design can be written to output

- !Requirement
  id: req-extract-tests
  text: Links between tests and statements can be extracted from the sources of the tests (if properly annotated)
  children:

  - !Specification
    id: spec-extract-tests
    text: Links between tests and statements can be extracted from the sources of the tests in different *test-annotations
    multiply: test-annotations

- !Requirement
  id: req-design-validity
  text: The validity of a *design-document can be checked according to rules


# Test lists
- !TestList
  id: tests-system
  name: System tests
  children:

  - !Test
    id: test-design-review # TODO delete
    # labels: non-functional
    text: Verify that a design can be reviewed manually
    statement: req-design-review

- !TestListFromDoxygen
  id: tests-unit
  name: Unit tests
  path: test/doxygen_tests
